{"version":"1.1.4-beta","data":{"uuid":"5c85bd82-0258-45c6-934a-97ecc1ad6617","title":"Basic Example Study","description":"A couple of sample components.","allowedWorkerList":["Jatos","ClosedStandalone","Tester"],"dirName":"basic_example_study","jsonData":"{\n  \"totalStudySlides\" : 17\n}","componentList":[{"uuid":"ae05b118-7d9a-4e5b-bd6c-8109d42e371e","title":"Hello World","htmlFilePath":"hello_world.html","reloadable":true,"active":true,"comments":"This is the most basic component.","jsonData":null},{"uuid":"07566943-9e1d-4f18-804f-c9b6841d6677","title":"Show JSON data ","htmlFilePath":"show_json_data.html","reloadable":true,"active":true,"comments":"In this text area you can write anything that you consider relevant for the component and want yourself or others to remember, but that is not part of the JavaScript or necessary for the component to run properly.  ","jsonData":"{\n  \"forwardsKey\" : \"F\",\n  \"backwardsKey\" : \"B\",\n  \"startingSlide\" : 2,\n  \"slideList\" : [ {\n    \"text\" : \"This component displays text and reacts to key presses. This is a single component containing multiple slides. You could use something along these lines to display task instructions.<br><br>The aim of this example component is to show some of the things you could do with JSON data.<br><br>\"\n  }, {\n    \"text\" : \"The text is specified in the JSON input data for this component. You can change it by going to the \\\"Properties\\\" button in the corresponding component toolbar.<br><br>You can get basic formatting using HTML tags in the JSON data. You can write <b>bold</b>, <i>italic</i>, or <u>underlined</u> text. You can include a <a href=\\\"http://jatos.github.io/JATOS/\\\" target=\\\"_blank\\\">link</a> or special charactes like &#8592 &#8593 &#8594 &#8595.<br><br>You can make lists like this:<ul><li>thing 1</li><li>thing 2</li><li>thing 3</li><br><br><br>Hint: When you are working with JSON strings, you have to \\\"escape\\\" a couple of special characters. E.g, if you want to include an html link, you'll need to use a backslash in front of double quotes (like ' \\\\\\\" ').<br><br>\"\n  }, {\n    \"text\" : \"Depending on how you wrote your script, you might be able to get quite a lot of flexibility from changing the JSON data. You could of course change the instructions, but also the number of trials, the identity and duration of stimuli shown, maximum response time allowed, possible response keys, etc. <br><br>For example, the JSON data for this component specifies which keys allow you to move forwards and backwards between slides.<br><br><br>Remember that all your scripts will be within the \\\"study_assets\\\" folder, in either your local or your server installation.<br><br>\"\n  }, {\n    \"text\" : \"Here's an empty slide for you to write anything in the JSON data and display it on the component page.<br><br>\"\n  }, {\n    \"text\" : \"We also added a couple of useful features. Have a look at the top right of this page. The two numbers correspond to the position of this slide relative to this component alone (top number) and relative to the entire study (bottom number).<br><br>The corresponding JavaScript (show_json_data.html) can automatically calculate the component-relative position, because all the necessary information is contained in the component's JSON data.<br><br>However, a component's JavaScripts does <i>not</i> have access to other components' properties. So, if you want to display information that depends on anything <i>other</i> than the current component, you could specify that information in the study JSON data, which is accessible from all components. You can do this by clicking on the \\\"Properties\\\" button in the study toolbar.<br><br>Keep in mind that, because the components don't have access to the global study information, you will need to set much of this by hand.\"\n  }, {\n    \"text\" : \"This is the last slide of the \\\"Show JSON data\\\" component. If you press the forwards key, JATOS will take you to the next component (if you are running the whole study) or back to the GUI (if you are running this component alone).\"\n  } ]\n}"},{"uuid":"efc30ec7-0e3f-4559-9a54-48e1e6db70b9","title":"Task instructions ","htmlFilePath":"task_instructions.html","reloadable":true,"active":true,"comments":"","jsonData":"{\n  \"forwardsKey\" : \"S\",\n  \"startingSlide\" : 8,\n  \"slideList\" : [ {\n    \"text\" : \"This component (\\\"Task instructions\\\") shows the instructions for the next component (\\\"Show task and submit result data\\\").<br><br><br><i>Quick note: We'll get a little bit ahead of ourselves and mention: the \\\"Task instructions\\\" are followed by \\\"Show task and submit result data\\\" in this example study when you downloaded it. But if you changed the order of the components, then the Task might no longer follow the Task Instructions!</i><br><br><br>In the next component you will see letters displayed on the screen. Your task is simply to press the same key as you see on the screen. <br><br>The JavaScript will store result data (which key you pressed and your reaction time) along with metadata (worker ID, study ID, etc)<br><br>\"\n  } ]\n}"},{"uuid":"32f815bb-1be2-4ea7-a41c-9617dc337f94","title":"Show task and submit result data","htmlFilePath":"task_submit_result_data.html","reloadable":true,"active":true,"comments":"","jsonData":"{\n  \"startingSlide\" : 9,\n  \"slideList\" : [ {\n    \"letterShown\" : \"A\"\n  }, {\n    \"letterShown\" : \"B\"\n  }, {\n    \"letterShown\" : \"C\"\n  }, {\n    \"letterShown\" : \"D\"\n  } ]\n}"},{"uuid":"58650292-0ccc-4b08-8c5c-c52eb10913f8","title":"Result in CSV format","htmlFilePath":"csv_results.html","reloadable":true,"active":true,"comments":"","jsonData":null},{"uuid":"ba17ca5a-0dd6-4803-8337-6bc7f865c34b","title":"Jump To Component","htmlFilePath":"jumpToComponent.html","reloadable":true,"active":true,"comments":"","jsonData":"{\n  \"startingSlide\" : 10,\n  \"slideList\" : [ {\n    \"text\" : \"JATOS doesn't limit you to move linearly between components. You can go backwards, forwards, or even loop over and over again on a single component. <br><br><br>\"\n  }, {\n    \"text\" : \"Looping between components is particularly useful in two cases: <ol><li>If you have one (or several) tasks that you want to repeat.</li><br><li>If you want to repeat the instructions as many times as necessary, until participants show that they understood them.</li></ol><br><br>\"\n  }, {\n    \"text\" : \"Take the following example of why you might want to repeat a given set of tasks.<br><br>Say you have two components: a memory task and a distractor task. You want to do 5 blocks of the memory task, with a distractor task between the blocks.<br><br>You don't need to create explicity 5 components with the same memory task and 4 components of the interleaved distractor task. All you need to do is n loop between these components. You can keep track of the loop number by passing URL parameters (we'll show you how).\"\n  }, {\n    \"text\" : \"Keep in mind that starting a component requires that the client (the participant's computer) communicates with the server (your computer, hosting the study). Therefore it always takes a little bit of time, and it depends on each participant's internet connection speed. <br><br> So looping components could be useful to run multiple blocks of a given task, but not not to run multiple trials of the same task.\"\n  }, {\n    \"text\" : \"Now imagine that you presented a task where participants have to respond yes or no, by pressing Y and N respectively. But you don't know whether your participants actually read the task instructions, or they just ignored them.<br><br>You could have a component that asked participants the question: \\\"What key would you press to answer 'yes'?\\\". If they respond correctly, you can continue with your study. If they respond incorrectly, you could loop back to the instructions component.\"\n  }, {\n    \"text\" : \"This component implements a number of ways in which you could do any of the looping we described in the previous slides.\"\n  } ]\n}"},{"uuid":"6dfc1d4f-4e9c-4f18-bc83-f977a5bdb7c3","title":"Read URL parameters","htmlFilePath":"read_url_parameters.html","reloadable":false,"active":true,"comments":"","jsonData":"{\n  \"forwardsKey\" : \"S\",\n  \"startingSlide\" : 8,\n  \"slideList\" : [ {\n    \"text\" : \"This component reads the data sent by another component via the URL, and displays it below.<br><br>You could use this method to transfer data and parameters between components, keep track of a looping number, etc.<br><br><br>\"\n  } ]\n}"},{"uuid":"7750316e-73d0-4efc-990c-99623b5359aa","title":"Quit button","htmlFilePath":"quit_button.html","reloadable":false,"active":true,"comments":"","jsonData":"{\n  \"forwardsKey\" : \"F\",\n  \"startingSlide\" : 17,\n  \"slideList\" : [ {\n    \"text\" : \"This component is about what you can do in the client side about ethics and data privacy.<br><br>In a traditional lab environment, participants can choose to quit a study at any point, and they are guaranteed that their data will be destroyed.<br><br>JATOS implements this online. Have a look at the bottom-right of the screen. Clicking the link to \\\"Quit study\\\" triggers a call to the jatos.js method \\\"jatos.abortStudy\\\", which will first ask for confirmation, and then  automatically delete all the participant's result data. The metadata remain (workerID, study start time, etc), in order to prevent participants from quiting the study and starting again.<br><br>Finally, have a look at what happens if you try to close the browser tab, reload the page or go back in the browser history: warning messages appear, alerting participants that they would not get paid if they quit the study.\"\n  } ]\n}"}]}}