package controllers.publix.actionannotation;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;

import controllers.publix.actionannotation.PublixExceptionAction.PublixExceptionCatching;
import exceptions.publix.InternalServerErrorPublixException;
import exceptions.publix.PublixException;
import play.Logger;
import play.mvc.Action;
import play.mvc.Controller;
import play.mvc.Http;
import play.mvc.Result;
import play.mvc.With;
import utils.common.HttpUtils;

/**
 * For all actions in a controller that is annotated with PublixAction catch
 * {@link PublixException} and return a Result generated by the exception.
 * 
 * @author Kristian Lange
 */
public class PublixExceptionAction extends Action<PublixExceptionCatching> {

	@With(PublixExceptionAction.class)
	@Target({ ElementType.TYPE, ElementType.METHOD })
	@Retention(RetentionPolicy.RUNTIME)
	public @interface PublixExceptionCatching {
	}

	public CompletionStage<Result> call(Http.Context ctx) {
		CompletionStage<Result> call;
		try {
			call = delegate.call(ctx);
//		} catch (InternalServerErrorPublixException e) {
//			Result result = e.getSimpleResult();
//			// Log exception with stack trace
//			Logger.info("PublixException during call "
//					+ Controller.request().uri() + ": " + e.getMessage(), e);
//			call = CompletableFuture.completedFuture(result);
//		} catch (PublixException e) {
//			Result result = e.getSimpleResult();
//			// Log exception without stack trace
//			Logger.info("PublixException during call "
//					+ Controller.request().uri() + ": " + e.getMessage());
//			call = CompletableFuture.completedFuture(result);
		} catch (Exception e) {
			// Log exception with stack trace
			Logger.error("Exception during call " + Controller.request().uri()
					+ ": " + e.getMessage(), e);
			if (HttpUtils.isAjax()) {
				call = CompletableFuture
						.completedFuture(internalServerError(e.getMessage()));
			} else {
				call = CompletableFuture.completedFuture(
						internalServerError(views.html.publix.error
								.render("Internal JATOS error during "
										+ Controller.request().uri() + ": "
										+ e.getMessage())));
			}
		}
		return call;
	}

}
