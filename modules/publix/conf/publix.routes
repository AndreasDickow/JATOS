# Routes
# This file defines all application routes (Higher priority routes first)
# Order is important!
# ~~~~

### Publix ###

GET     /publix/:studyId/start                           @controllers.publix.PublixInterceptor.startStudy(studyId: Long, batchId: Long ?= -1)
GET     /publix/:studyId/end                             @controllers.publix.PublixInterceptor.finishStudy(studyId: Long, srid: Long, successful: Boolean ?= true, message: String ?= null)
GET     /publix/:studyId/abort                           @controllers.publix.PublixInterceptor.abortStudy(studyId: Long, srid: Long, message: String ?= null)
POST    /publix/:studyId/heartbeat                       @controllers.publix.PublixInterceptor.heartbeat(studyId: Long, srid: Long)
POST    /publix/:studyId/studySessionData                @controllers.publix.PublixInterceptor.setStudySessionData(studyId: Long, srid: Long)
GET     /publix/:studyId/:componentId/start              @controllers.publix.PublixInterceptor.startComponent(studyId: Long, componentId: Long, srid: Long, message: String ?= null)
GET     /publix/:studyId/:componentId/initData           @controllers.publix.PublixInterceptor.getInitData(studyId: Long, componentId: Long, srid: Long)
PUT     /publix/:studyId/:componentId/resultData         @controllers.publix.PublixInterceptor.submitResultData(studyId: Long, componentId: Long, srid: Long)
POST    /publix/:studyId/:componentId/resultData         @controllers.publix.PublixInterceptor.appendResultData(studyId: Long, componentId: Long, srid: Long)
POST    /publix/:studyId/:componentId/log                @controllers.publix.PublixInterceptor.log(studyId: Long, componentId: Long, srid: Long)
POST    /publix/:studyId/:componentId/files/:filename    @controllers.publix.PublixInterceptor.uploadResultFile(request: Request, studyId: Long, componentId: Long, srid: Long, filename: String)
GET     /publix/:studyId/files/:filename                 @controllers.publix.PublixInterceptor.downloadResultFile(studyId: Long, srid: Long, filename: String, componentId: java.util.Optional[java.lang.Long])

# Batch and group channel endpoints
GET     /publix/:studyId/batch/open                      @controllers.publix.ChannelInterceptor.openBatch(studyId: Long, srid: Long)
GET     /publix/:studyId/group/join                      @controllers.publix.ChannelInterceptor.joinGroup(studyId: Long, srid: Long)
GET     /publix/:studyId/group/reassign                  @controllers.publix.ChannelInterceptor.reassignGroup(studyId: Long, srid: Long)
GET     /publix/:studyId/group/leave                     @controllers.publix.ChannelInterceptor.leaveGroup(studyId: Long, srid: Long)


### Static resources ###

GET     /public/*file                                    controllers.publix.Assets.at(path = "/public", file)

# Study assets
GET     /publix/:studyId/endPage.html                    @controllers.publix.StudyAssets.endPage(studyId: Long)
GET     /publix/:studyId/:arbitrary/*file                @controllers.publix.StudyAssets.viaStudyPath(studyId: Long, arbitrary, file: String)
GET     /study_assets_root/*file                         @controllers.publix.StudyAssets.viaAssetsPath(file)
GET     /study_assets/*file                              @controllers.publix.StudyAssets.viaAssetsPath(file)
