# Routes
# This file defines all routes for JATOS' GUI (Higher priority routes first)
# Order is important!
# ~~~~

# Admin controller
GET      /jatos/admin                                                       @controllers.gui.Admin.administration(request: Request)
GET      /jatos/status                                                      @controllers.gui.Admin.status()
GET      /jatos/studyAdmin                                                  @controllers.gui.Admin.studyAdmin(request: Request)
GET      /jatos/allStudiesData                                              @controllers.gui.Admin.allStudiesData()
GET      /jatos/studiesData                                                 @controllers.gui.Admin.studiesDataByUser(username: String)
GET      /jatos/listLogs                                                    @controllers.gui.Admin.listLogs()
GET      /jatos/log                                                         @controllers.gui.Admin.log(limit: Integer ?= -1)
GET      /jatos/logs/:filename                                              @controllers.gui.Admin.logs(filename: String, limit: Integer ?= -1, reverse: Boolean ?= false)

# Update controller
GET      /jatos/releaseInfo                                                 @controllers.gui.Updates.getReleaseInfo(version:String ?= null, allowPreReleases:Boolean ?= false)
GET      /jatos/cancelUpdate                                                @controllers.gui.Updates.cancelUpdate()
GET      /jatos/downloadJatos                                               @controllers.gui.Updates.downloadJatos(dry:Boolean ?= false)
GET      /jatos/updateAndRestart                                            @controllers.gui.Updates.updateAndRestart(backupAll:Boolean)

# Tests controller
GET      /jatos/test                                                        @controllers.gui.Tests.test()
GET      /jatos/testDatabase                                                @controllers.gui.Tests.testDatabase()
GET      /jatos/testStudyAssetsRootFolder                                   @controllers.gui.Tests.testStudyAssetsRootFolder()
GET      /jatos/testCache                                                   @controllers.gui.Tests.testCache()
GET      /jatos/testJsonSerialization                                       @controllers.gui.Tests.testJsonSerialization()
GET      /jatos/testWebSocket                                               @controllers.gui.Tests.testWebSocket()

# Authentication controller
GET      /jatos/login                                                       @controllers.gui.Authentication.login()
POST     /jatos/login                                                       @controllers.gui.Authentication.authenticate(request: Request)
POST     /jatos/signInWithGoogle                                            @controllers.gui.Authentication.signInWithGoogle(request: Request)
GET      /jatos/logout                                                      @controllers.gui.Authentication.logout(request: Request)

# Home controller
GET      /jatos/sidebarStudyList                                            @controllers.gui.Home.sidebarStudyList()
GET      /jatos                                                             @controllers.gui.Home.home()
GET      /jatos/                                                            @controllers.gui.Home.home()
GET      /                                                                  @controllers.gui.Home.home()
GET      /jatos/branding                                                    @controllers.gui.Home.branding()

# Users controller
GET      /jatos/userManager                                                 @controllers.gui.Users.userManager()
GET      /jatos/userData                                                    @controllers.gui.Users.allUserData()
POST     /jatos/user                                                        @controllers.gui.Users.create(request: Request)
POST     /jatos/user/:username/profile                                      @controllers.gui.Users.edit(username: String)
GET      /jatos/user/:username/userData                                     @controllers.gui.Users.singleUserData(username: String)
POST     /jatos/user/passwordByUser                                         @controllers.gui.Users.changePasswordByUser(request: Request)
POST     /jatos/user/passwordByAdmin                                        @controllers.gui.Users.changePasswordByAdmin(request: Request)
POST     /jatos/user/:username/properties/role                              @controllers.gui.Users.toggleRole(username: String, role: String, value: Boolean)
POST     /jatos/user/:username/properties/active                            @controllers.gui.Users.toggleActive(username: String, active: Boolean)
GET      /jatos/user/:username                                              @controllers.gui.Users.profile(username: String)
# Play doesn't allow data in body in a DELETE request, so I use POST instead
POST     /jatos/user/:username/delete                                       @controllers.gui.Users.remove(username: String)

# ComponentResults & StudyResults controller
GET      /jatos/worker/:workerId/results                                    @controllers.gui.StudyResults.workersStudyResults(workerId: Long)
GET      /jatos/worker/:workerId/tableData                                  @controllers.gui.StudyResults.tableDataByWorker(workerId: Long)
GET      /jatos/:studyId/batch/:batchId/results                             @controllers.gui.StudyResults.batchesStudyResults(studyId: Long, batchId: Long, workerType: Option[String])
GET      /jatos/:studyId/batch/:batchId/tableData                           @controllers.gui.StudyResults.tableDataByBatch(studyId: Long, batchId: Long, workerType: Option[String])
GET      /jatos/:studyId/group/:groupId/results                             @controllers.gui.StudyResults.groupsStudyResults(studyId: Long, groupId: Long)
GET      /jatos/:studyId/group/:groupId/tableData                           @controllers.gui.StudyResults.tableDataByGroup(studyId: Long, groupId: Long)
GET      /jatos/:studyId/results                                            @controllers.gui.StudyResults.studysStudyResults(studyId: Long)
GET      /jatos/:studyId/resultsTableData                                   @controllers.gui.StudyResults.tableDataByStudy(studyId: Long)
POST     /jatos/studyResult/delete                                          @controllers.gui.StudyResults.remove()
GET      /jatos/studyResult/:studyResultId/componentResults                 @controllers.gui.StudyResults.tableDataComponentResultByStudyResult(studyResultId: Long)
GET      /jatos/:studyId/:componentId/tableData                             @controllers.gui.ComponentResults.tableDataByComponent(studyId: Long, componentId: Long)
POST     /jatos/componentResult/delete                                      @controllers.gui.ComponentResults.remove(request: Request)
GET      /jatos/componentResult/:componentResultId/data                     @controllers.gui.ComponentResults.tableDataComponentResultData(componentResultId: Long)
GET      /jatos/:studyId/:componentId/results                               @controllers.gui.ComponentResults.componentResults(studyId: Long, componentId: Long)

# Studies controller
POST     /jatos/study                                                       @controllers.gui.Studies.submitCreated()
GET      /jatos/:studyId/properties                                         @controllers.gui.Studies.properties(studyId: Long)
POST     /jatos/:studyId/properties                                         @controllers.gui.Studies.submitEdited(studyId: Long)
POST     /jatos/:studyId/properties/active                                  @controllers.gui.Studies.toggleActive(studyId: Long, active: Boolean)
POST     /jatos/:studyId/memberUser                                         @controllers.gui.Studies.toggleMemberUser(studyId: Long, username: String, isMember: Boolean)
POST     /jatos/:studyId/memberUsers                                        @controllers.gui.Studies.addAllMemberUsers(studyId: Long)
DELETE   /jatos/:studyId/memberUsers                                        @controllers.gui.Studies.removeAllMemberUsers(studyId: Long)
GET      /jatos/:studyId/memberUsers                                        @controllers.gui.Studies.memberUsers(studyId: Long)
DELETE   /jatos/:studyId                                                    @controllers.gui.Studies.remove(studyId: Long)
POST     /jatos/:studyId/componentOrder                                     @controllers.gui.Studies.changeComponentOrder(studyId: Long, componentId: Long, newPosition: String)
GET      /jatos/:studyId/run                                                @controllers.gui.Studies.runStudy(request: Request, studyId: Long, batchId: Long ?= -1)
GET      /jatos/:studyId/clone                                              @controllers.gui.Studies.cloneStudy(studyId: Long)
POST     /jatos/:studyId/lock/toggle                                        @controllers.gui.Studies.toggleLock(studyId: Long)
GET      /jatos/:studyId/componentsTableData                                @controllers.gui.Studies.tableDataByStudy(studyId: Long)
GET      /jatos/:studyId/log                                                @controllers.gui.Studies.studyLog(studyId: Long, limit: Integer ?= -1, download: Boolean ?= false)
GET      /jatos/:studyId/allWorkers                                         @controllers.gui.Studies.allWorkers(studyId: Long)
GET      /jatos/:studyId                                                    @controllers.gui.Studies.study(studyId: Long)
GET      /jatos/:studyId/                                                   @controllers.gui.Studies.study(studyId: Long)

# Batches controller
GET      /jatos/:studyId/studyLinks                                         @controllers.gui.StudyLinks.studyLinks(request: Request, studyId: Long)
POST     /jatos/:studyId/batch                                              @controllers.gui.StudyLinks.submitCreatedBatch(request: Request, studyId: Long)
POST     /jatos/:studyId/batch/:batchId/properties/workerType/:workerType   @controllers.gui.StudyLinks.toggleAllowedWorkerType(studyId: Long, batchId: Long, workerType: String, allow: Boolean)
POST     /jatos/:studyId/batch/:batchId/properties/active                   @controllers.gui.StudyLinks.toggleBatchActive(studyId: Long, batchId: Long, active: Boolean)
GET      /jatos/:studyId/batch/:batchId/properties                          @controllers.gui.StudyLinks.batchProperties(studyId: Long, batchId: Long)
POST     /jatos/:studyId/batch/:batchId/properties                          @controllers.gui.StudyLinks.submitEditedBatchProperties(request: Request, studyId: Long, batchId: Long)
GET      /jatos/:studyId/batch/:batchId/batchSessionData                    @controllers.gui.StudyLinks.batchSessionData(studyId: Long, batchId: Long)
POST     /jatos/:studyId/batch/:batchId/batchSessionData                    @controllers.gui.StudyLinks.submitEditedBatchSessionData(request: Request, studyId: Long, batchId: Long)
POST     /jatos/:studyId/batch/:batchId/personalSingleRun                   @controllers.gui.StudyLinks.createPersonalRun(request: Request, studyId: Long, batchId: Long, workerType = "PersonalSingle")
POST     /jatos/:studyId/batch/:batchId/personalMultipleRun                 @controllers.gui.StudyLinks.createPersonalRun(request: Request, studyId: Long, batchId: Long, workerType = "PersonalMultiple")
GET      /jatos/:studyId/batch/:batchId/generalSingleRun                    @controllers.gui.StudyLinks.createGeneralRun(studyId: Long, batchId: Long, workerType = "GeneralSingle")
GET      /jatos/:studyId/batch/:batchId/generalMultipleRun                  @controllers.gui.StudyLinks.createGeneralRun(studyId: Long, batchId: Long, workerType = "GeneralMultiple")
GET      /jatos/:studyId/batch/:batchId/mTurkRun                            @controllers.gui.StudyLinks.createGeneralRun(studyId: Long, batchId: Long, workerType = "MT")
GET      /jatos/:studyId/batch/:batchId/studyLinksSetupData                 @controllers.gui.StudyLinks.studyLinksSetupData(studyId: Long, batchId: Long)
GET      /jatos/:studyId/batch/:batchId/studyLinksData                      @controllers.gui.StudyLinks.studyLinksData(studyId: Long, batchId: Long, workerType: String)
POST     /jatos/:studyId/batch/:batchId/studyLink/:studyCode                @controllers.gui.StudyLinks.toggleStudyLinkActive(studyId: Long, batchId: Long, studyCode: String, active: Boolean)
DELETE   /jatos/:studyId/batch/:batchId                                     @controllers.gui.StudyLinks.removeBatch(studyId: Long, batchId: Long)
GET      /jatos/:studyId/batch/:batchId                                     @controllers.gui.StudyLinks.batchById(studyId: Long, batchId: Long)
GET      /jatos/:studyId/batches                                            @controllers.gui.StudyLinks.batchesByStudy(studyId: Long)
GET      /jatos/:studyId/batch/:batchId/groups                              @controllers.gui.StudyLinks.groupsByBatch(studyId: Long, batchId: Long)
POST     /jatos/:studyId/group/:groupId/fixed                               @controllers.gui.StudyLinks.toggleGroupFixed(studyId: Long, groupId: Long, fixed: Boolean)
GET      /jatos/:studyId/group/:groupId/groupSessionData                    @controllers.gui.StudyLinks.groupSessionData(studyId: Long, groupId: Long)
POST     /jatos/:studyId/group/:groupId/groupSessionData                    @controllers.gui.StudyLinks.submitEditedGroupSessionData(request: Request, studyId: Long, groupId: Long)

# Components controller
POST     /jatos/:studyId/component                                          @controllers.gui.Components.submitCreated(studyId: Long)
POST     /jatos/:studyId/:componentId/properties/active                     @controllers.gui.Components.toggleActive(studyId: Long, componentId: Long, active: Boolean)
GET      /jatos/:studyId/:componentId/properties                            @controllers.gui.Components.properties(studyId: Long, componentId: Long)
POST     /jatos/:studyId/:componentId/properties                            @controllers.gui.Components.submitEdited(studyId: Long, componentId: Long)
DELETE   /jatos/:studyId/:componentId                                       @controllers.gui.Components.remove(studyId: Long, componentId: Long)
GET      /jatos/:studyId/:componentId/run                                   @controllers.gui.Components.runComponent(request: Request, studyId: Long, componentId: Long, batchId: Long ?= -1)
GET      /jatos/:studyId/:componentId/clone                                 @controllers.gui.Components.cloneComponent(studyId: Long, componentId: Long)

# ImportExport controller
POST     /jatos/studyResult/export/resultData                               @controllers.gui.ImportExport.exportDataOfStudyResults(request: Request)
POST     /jatos/studyResult/export/resultFiles                              @controllers.gui.ImportExport.exportResultFilesOfStudyResults(request: Request)
POST     /jatos/componentResult/export/resultData                           @controllers.gui.ImportExport.exportDataOfComponentResults(request: Request)
POST     /jatos/componentResult/export/resultFiles                          @controllers.gui.ImportExport.exportResultFilesOfComponentResults(request: Request)
POST     /jatos/import/study                                                @controllers.gui.ImportExport.importStudy(request: Request)
POST     /jatos/import/studyConfirmed                                       @controllers.gui.ImportExport.importStudyConfirmed(request: Request)
GET      /jatos/:studyId/export                                             @controllers.gui.ImportExport.exportStudy(studyId: Long)
POST     /jatos/:studyId/import/component                                   @controllers.gui.ImportExport.importComponent(request: Request, studyId: Long)
POST     /jatos/:studyId/import/componentConfirmed                          @controllers.gui.ImportExport.importComponentConfirmed(studyId: Long)
GET      /jatos/:studyId/:componentId/export                                @controllers.gui.ImportExport.exportComponent(studyId: Long, componentId: Long)
GET      /jatos/:studyId/resultFiles/:srid/:crid/:filename                  @controllers.gui.ImportExport.downloadSingleResultFile(studyId: Long, srid: Long, crid: Long, filename: String)


### Static resources ###

# StreamSaver needs some special routes to work with an URL base path
GET      /jatos/worker/:ignore/mitm.html                                    @controllers.gui.StreamSaverAssets.at1(path="/public/lib/jatos-gui/streamsaver", file = "mitm.html", ignore: Long)
GET      /jatos/worker/:ignore/sw.js                                        @controllers.gui.StreamSaverAssets.at1(path="/public/lib/jatos-gui/streamsaver", file = "sw.js", ignore: Long)
GET      /jatos/:ignore1/batch/:ignore2/mitm.html                           @controllers.gui.StreamSaverAssets.at2(path="/public/lib/jatos-gui/streamsaver", file = "mitm.html", ignore1: Long, ignore2: Long)
GET      /jatos/:ignore1/batch/:ignore2/sw.js                               @controllers.gui.StreamSaverAssets.at2(path="/public/lib/jatos-gui/streamsaver", file = "sw.js", ignore1: Long, ignore2: Long)
GET      /jatos/:ignore1/group/:ignore2/mitm.html                           @controllers.gui.StreamSaverAssets.at2(path="/public/lib/jatos-gui/streamsaver", file = "mitm.html", ignore1: Long, ignore2: Long)
GET      /jatos/:ignore1/group/:ignore2/sw.js                               @controllers.gui.StreamSaverAssets.at2(path="/public/lib/jatos-gui/streamsaver", file = "sw.js", ignore1: Long, ignore2: Long)
GET      /jatos/:ignore/mitm.html                                           @controllers.gui.StreamSaverAssets.at1(path="/public/lib/jatos-gui/streamsaver", file = "mitm.html", ignore: Long)
GET      /jatos/:ignore/sw.js                                               @controllers.gui.StreamSaverAssets.at1(path="/public/lib/jatos-gui/streamsaver", file = "sw.js", ignore: Long)
GET      /jatos/:ignore1/:ignore2/mitm.html                                 @controllers.gui.StreamSaverAssets.at2(path="/public/lib/jatos-gui/streamsaver", file = "mitm.html", ignore1: Long, ignore2: Long)
GET      /jatos/:ignore1/:ignore2/sw.js                                     @controllers.gui.StreamSaverAssets.at2(path="/public/lib/jatos-gui/streamsaver", file = "sw.js", ignore1: Long, ignore2: Long)

# General assets
GET      /assets/*file                                                      controllers.Assets.versioned(path="/public/lib/gui", file: Asset)
