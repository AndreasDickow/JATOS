# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Publix
GET     /publix/:studyId/start                           @controllers.publix.PublixInterceptor.startStudy(studyId: Long)
GET     /publix/:studyId/end                             @controllers.publix.PublixInterceptor.finishStudy(studyId: Long, successful: Boolean ?= true, errorMsg: String ?= null)
GET     /publix/:studyId/abort                           @controllers.publix.PublixInterceptor.abortStudy(studyId: Long, message: String ?= null)
POST    /publix/:studyId/setSessionData                  @controllers.publix.PublixInterceptor.setStudySessionData(studyId: Long)
# Start component by ID
GET     /publix/:studyId/:componentId/start              @controllers.publix.PublixInterceptor.startComponent(studyId: Long, componentId: Long)
GET     /publix/:studyId/:componentId/end                @controllers.publix.PublixInterceptor.finishComponent(studyId: Long, componentId: Long, successful: Boolean ?= true, errorMsg: String ?= null)
# Start component by position
GET     /publix/:studyId/startComponent                  @controllers.publix.PublixInterceptor.startComponentByPosition(studyId: Long, position: Integer)
GET     /publix/:studyId/startNextComponent              @controllers.publix.PublixInterceptor.startNextComponent(studyId: Long)
GET     /publix/:studyId/:componentId/initData           @controllers.publix.PublixInterceptor.getInitData(studyId: Long, componentId: Long)
POST    /publix/:studyId/:componentId/submitResultData   @controllers.publix.PublixInterceptor.submitResultData(studyId: Long, componentId: Long)
POST    /publix/:studyId/:componentId/logError           @controllers.publix.PublixInterceptor.logError(studyId: Long, componentId: Long)

# JATOS
GET     /jatos/login                                 @controllers.gui.Authentication.login()
POST    /jatos/login                                 @controllers.gui.Authentication.authenticate()
GET     /jatos/logout                                @controllers.gui.Authentication.logout()
GET     /jatos/sidebarStudyList                      @controllers.gui.Home.sidebarStudyList()
GET     /jatos                                       @controllers.gui.Home.home()
GET     /jatos/                                      @controllers.gui.Home.home()
GET     /                                            @controllers.gui.Home.home()
GET     /jatos/admin/log                             @controllers.gui.Home.log(limit: Integer ?= 1000)
GET     /jatos/user/create                           @controllers.gui.Users.create()
POST    /jatos/user/create                           @controllers.gui.Users.submit()
GET     /jatos/user/:email/editProfile               @controllers.gui.Users.editProfile(email: String)
POST    /jatos/user/:email/editProfile               @controllers.gui.Users.submitEditedProfile(email: String)
GET     /jatos/user/:email/changePassword            @controllers.gui.Users.changePassword(email: String)
POST    /jatos/user/:email/changePassword            @controllers.gui.Users.submitChangedPassword(email: String)
GET     /jatos/user/:email                           @controllers.gui.Users.profile(email: String)
GET     /jatos/worker/:workerId                      @controllers.gui.Workers.index(workerId: Long)
DELETE  /jatos/worker/:workerId/remove               @controllers.gui.Workers.remove(workerId: Long)
GET     /jatos/worker/:workerId/tableData            @controllers.gui.StudyResults.tableDataByWorker(workerId: Long)
GET     /jatos/studyresult/exportData                @controllers.gui.StudyResults.exportData(studyResultIds: String)
GET     /jatos/studyresult/remove                    @controllers.gui.StudyResults.remove(studyResultIds: String)
GET     /jatos/componentresult/exportData            @controllers.gui.ComponentResults.exportData(componentResultIds: String)
GET     /jatos/componentresult/remove                @controllers.gui.ComponentResults.remove(componentResultIds: String)
GET     /jatos/createStudy                           @controllers.gui.Studies.create()
POST    /jatos/createStudy                           @controllers.gui.Studies.submit()
POST    /jatos/importStudy                           @controllers.gui.ImportExport.importStudy()
POST    /jatos/importStudyConfirmed                  @controllers.gui.ImportExport.importStudyConfirmed()
GET     /jatos/:studyId/edit                         @controllers.gui.Studies.edit(studyId: Long)
POST    /jatos/:studyId/edit                         @controllers.gui.Studies.submitEdited(studyId: Long)
GET     /jatos/:studyId/changeMembers                @controllers.gui.Studies.changeMembers(studyId: Long)
POST    /jatos/:studyId/changeMembers                @controllers.gui.Studies.submitChangedMembers(studyId: Long)
DELETE  /jatos/:studyId/remove                       @controllers.gui.Studies.remove(studyId: Long)
POST    /jatos/:studyId/changeComponentOrder         @controllers.gui.Studies.changeComponentOrder(studyId: Long, componentId: Long, newPosition: String)
GET     /jatos/:studyId/mturk                        @controllers.gui.Studies.showMTurkSourceCode(studyId: Long)
GET     /jatos/:studyId/show                         @controllers.gui.Studies.showStudy(studyId: Long)
POST    /jatos/:studyId/createClosedStandaloneRun    @controllers.gui.Studies.createClosedStandaloneRun(studyId: Long)
POST    /jatos/:studyId/createTesterRun              @controllers.gui.Studies.createTesterRun(studyId: Long)
GET     /jatos/:studyId/clone                        @controllers.gui.Studies.cloneStudy(studyId: Long)
GET     /jatos/:studyId/export                       @controllers.gui.ImportExport.exportStudy(studyId: Long)
POST    /jatos/:studyId/swapLock                     @controllers.gui.Studies.swapLock(studyId: Long)
GET     /jatos/:studyId/results                      @controllers.gui.StudyResults.index(studyId: Long)
GET     /jatos/:studyId/resultsTableData             @controllers.gui.StudyResults.tableDataByStudy(studyId: Long)
GET     /jatos/:studyId/componentsTableData          @controllers.gui.Studies.tableDataByStudy(studyId: Long)
GET     /jatos/:studyId/workersTableData             @controllers.gui.Workers.tableDataByStudy(studyId: Long)
GET     /jatos/:studyId/workers                      @controllers.gui.Studies.workers(studyId: Long)
GET     /jatos/:studyId                              @controllers.gui.Studies.index(studyId: Long)
GET     /jatos/:studyId/                             @controllers.gui.Studies.index(studyId: Long)
GET     /jatos/:studyId/createComponent              @controllers.gui.Components.create(studyId: Long)
POST    /jatos/:studyId/createComponent              @controllers.gui.Components.submit(studyId: Long)
POST    /jatos/:studyId/importComponent              @controllers.gui.ImportExport.importComponent(studyId: Long)
POST    /jatos/:studyId/importComponentConfirmed     @controllers.gui.ImportExport.importComponentConfirmed(studyId: Long)
GET     /jatos/:studyId/:componentId/edit            @controllers.gui.Components.edit(studyId: Long, componentId: Long)
POST    /jatos/:studyId/:componentId/edit            @controllers.gui.Components.submitEdited(studyId: Long, componentId: Long)
POST    /jatos/:studyId/:componentId/changeProperty  @controllers.gui.Components.changeProperty(studyId: Long, componentId: Long, active: Boolean)
DELETE  /jatos/:studyId/:componentId/remove          @controllers.gui.Components.remove(studyId: Long, componentId: Long)
GET     /jatos/:studyId/:componentId/results         @controllers.gui.ComponentResults.index(studyId: Long, componentId: Long)
GET     /jatos/:studyId/:componentId/tableData       @controllers.gui.ComponentResults.tableDataByComponent(studyId: Long, componentId: Long)
GET     /jatos/:studyId/:componentId/show            @controllers.gui.Components.showComponent(studyId: Long, componentId: Long)
GET     /jatos/:studyId/:componentId/clone           @controllers.gui.Components.cloneComponent(studyId: Long, componentId: Long)
GET     /jatos/:studyId/:componentId/export          @controllers.gui.ImportExport.exportComponent(studyId: Long, componentId: Long)

# Static resources (not managed by the Play framework)
GET     /study_assets/*file                @controllers.publix.StudyAssets.at(file)
GET     /assets/*file                      controllers.Assets.at(path = "/public", file)
GET     /webjars/*file                     controllers.WebJarAssets.at(file)
