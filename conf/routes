# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Publix
GET     /publix/:studyId/start                           @publix.controllers.PublixInterceptor.startStudy(studyId: Long)
GET     /publix/:studyId/end                             @publix.controllers.PublixInterceptor.finishStudy(studyId: Long, successful: Boolean ?= true, errorMsg: String ?= null)
GET     /publix/:studyId/abort                           @publix.controllers.PublixInterceptor.abortStudy(studyId: Long, message: String ?= null)
GET     /publix/:studyId/group/join                      @publix.controllers.PublixInterceptor.joinGroup(studyId: Long)
GET     /publix/:studyId/group/leave                     @publix.controllers.PublixInterceptor.leaveGroup(studyId: Long)
POST    /publix/:studyId/sessionData                     @publix.controllers.PublixInterceptor.setStudySessionData(studyId: Long)
GET     /publix/:studyId/nextComponent/start             @publix.controllers.PublixInterceptor.startNextComponent(studyId: Long)
# Start component by position
GET     /publix/:studyId/component/start                 @publix.controllers.PublixInterceptor.startComponentByPosition(studyId: Long, position: Integer)
# Start component by ID
GET     /publix/:studyId/:componentId/start              @publix.controllers.PublixInterceptor.startComponent(studyId: Long, componentId: Long)
GET     /publix/:studyId/:componentId/end                @publix.controllers.PublixInterceptor.finishComponent(studyId: Long, componentId: Long, successful: Boolean ?= true, errorMsg: String ?= null)
GET     /publix/:studyId/:componentId/initData           @publix.controllers.PublixInterceptor.getInitData(studyId: Long, componentId: Long)
POST    /publix/:studyId/:componentId/resultData         @publix.controllers.PublixInterceptor.submitResultData(studyId: Long, componentId: Long)
POST    /publix/:studyId/:componentId/log                @publix.controllers.PublixInterceptor.log(studyId: Long, componentId: Long)

# JATOS
GET     /jatos/login                                 @controllers.Authentication.login()
POST    /jatos/login                                 @controllers.Authentication.authenticate()
GET     /jatos/logout                                @controllers.Authentication.logout()
GET     /jatos/sidebarStudyList                      @controllers.Home.sidebarStudyList()
GET     /jatos                                       @controllers.Home.home()
GET     /jatos/                                      @controllers.Home.home()
GET     /                                            @controllers.Home.home()
GET     /jatos/admin/log                             @controllers.Home.log(limit: Integer ?= 1000)
GET     /jatos/user/create                           @controllers.Users.create()
POST    /jatos/user                                  @controllers.Users.submit()
GET     /jatos/user/:email/profile/edit              @controllers.Users.editProfile(email: String)
POST    /jatos/user/:email/profile                   @controllers.Users.submitEditedProfile(email: String)
GET     /jatos/user/:email/password/change           @controllers.Users.changePassword(email: String)
POST    /jatos/user/:email/password                  @controllers.Users.submitChangedPassword(email: String)
GET     /jatos/user/:email                           @controllers.Users.profile(email: String)
GET     /jatos/worker/:workerId                      @controllers.Workers.index(workerId: Long)
DELETE  /jatos/worker/:workerId                      @controllers.Workers.remove(workerId: Long)
GET     /jatos/worker/:workerId/export/allResultData @controllers.ImportExport.exportAllResultDataOfWorker(workerId: Long)
DELETE  /jatos/worker/:workerId/allResultData        @controllers.StudyResults.removeAllOfWorker(workerId: Long)
GET     /jatos/worker/:workerId/tableData            @controllers.StudyResults.tableDataByWorker(workerId: Long)
GET     /jatos/studyResult/export/resultData         @controllers.ImportExport.exportDataOfStudyResults(studyResultIds: String)
DELETE  /jatos/studyResult                           @controllers.StudyResults.remove(studyResultIds: String)
GET     /jatos/componentResult/export/resultData     @controllers.ImportExport.exportDataOfComponentResults(componentResultIds: String)
DELETE  /jatos/componentResult                       @controllers.ComponentResults.remove(componentResultIds: String)
GET     /jatos/study/create                          @controllers.Studies.create()
POST    /jatos/study                                 @controllers.Studies.submit()
POST    /jatos/import/study                          @controllers.ImportExport.importStudy()
POST    /jatos/import/studyConfirmed                 @controllers.ImportExport.importStudyConfirmed()
GET     /jatos/:studyId/edit                         @controllers.Studies.edit(studyId: Long)
POST    /jatos/:studyId                              @controllers.Studies.submitEdited(studyId: Long)
GET     /jatos/:studyId/users/change                 @controllers.Studies.changeUsers(studyId: Long)
POST    /jatos/:studyId/users                        @controllers.Studies.submitChangedUsers(studyId: Long)
DELETE  /jatos/:studyId                              @controllers.Studies.remove(studyId: Long)
POST    /jatos/:studyId/componentOrder               @controllers.Studies.changeComponentOrder(studyId: Long, componentId: Long, newPosition: String)
GET     /jatos/:studyId/mturk                        @controllers.Studies.showMTurkSourceCode(studyId: Long)
GET     /jatos/:studyId/show                         @controllers.Studies.showStudy(studyId: Long)
POST    /jatos/:studyId/personalSingleRun            @controllers.Studies.createPersonalSingleRun(studyId: Long)
POST    /jatos/:studyId/personalMultipleRun          @controllers.Studies.createPersonalMultipleRun(studyId: Long)
GET     /jatos/:studyId/clone                        @controllers.Studies.cloneStudy(studyId: Long)
GET     /jatos/:studyId/export                       @controllers.ImportExport.exportStudy(studyId: Long)
POST    /jatos/:studyId/lock/swap                    @controllers.Studies.swapLock(studyId: Long)
GET     /jatos/:studyId/results                      @controllers.StudyResults.index(studyId: Long)
GET     /jatos/:studyId/resultsTableData             @controllers.StudyResults.tableDataByStudy(studyId: Long)
GET     /jatos/:studyId/export/allResultData         @controllers.ImportExport.exportDataOfAllStudyResults(studyId: Long)
DELETE  /jatos/:studyId/allResults                   @controllers.StudyResults.removeAllOfStudy(studyId: Long)
GET     /jatos/:studyId/componentsTableData          @controllers.Studies.tableDataByStudy(studyId: Long)
GET     /jatos/:studyId/workersTableData             @controllers.Workers.tableDataByStudy(studyId: Long)
GET     /jatos/:studyId/workers                      @controllers.Studies.workers(studyId: Long)
GET     /jatos/:studyId                              @controllers.Studies.index(studyId: Long)
GET     /jatos/:studyId/                             @controllers.Studies.index(studyId: Long)
GET     /jatos/:studyId/component/create             @controllers.Components.create(studyId: Long)
POST    /jatos/:studyId/component                    @controllers.Components.submit(studyId: Long)
POST    /jatos/:studyId/import/component             @controllers.ImportExport.importComponent(studyId: Long)
POST    /jatos/:studyId/import/componentConfirmed    @controllers.ImportExport.importComponentConfirmed(studyId: Long)
GET     /jatos/:studyId/:componentId/edit            @controllers.Components.edit(studyId: Long, componentId: Long)
POST    /jatos/:studyId/:componentId                 @controllers.Components.submitEdited(studyId: Long, componentId: Long)
POST    /jatos/:studyId/:componentId/property        @controllers.Components.changeProperty(studyId: Long, componentId: Long, active: Boolean)
DELETE  /jatos/:studyId/:componentId                 @controllers.Components.remove(studyId: Long, componentId: Long)
GET     /jatos/:studyId/:componentId/results         @controllers.ComponentResults.index(studyId: Long, componentId: Long)
GET     /jatos/:studyId/:componentId/tableData       @controllers.ComponentResults.tableDataByComponent(studyId: Long, componentId: Long)
GET     /jatos/:studyId/:componentId/export/allResultData  @controllers.ImportExport.exportDataOfAllComponentResults(studyId: Long, componentId: Long)
DELETE  /jatos/:studyId/:componentId/allResults      @controllers.ComponentResults.removeAllOfComponent(studyId: Long, componentId: Long)
GET     /jatos/:studyId/:componentId/show            @controllers.Components.showComponent(studyId: Long, componentId: Long)
GET     /jatos/:studyId/:componentId/clone           @controllers.Components.cloneComponent(studyId: Long, componentId: Long)
GET     /jatos/:studyId/:componentId/export          @controllers.ImportExport.exportComponent(studyId: Long, componentId: Long)

# Static resources
GET     /favicon.ico                       controllers.Assets.at(path="/public", file="favicon.ico")
GET     /favicon-16x16.png                 controllers.Assets.at(path="/public", file="favicon-16x16.png")
GET     /favicon-32x32.png                 controllers.Assets.at(path="/public", file="favicon-32x32.png")
GET     /favicon-96x96.png                 controllers.Assets.at(path="/public", file="favicon-96x96.png")
GET     /study_assets/*file                @publix.controllers.StudyAssets.at(file)
GET     /assets/*file                      controllers.Assets.at(path = "/public", file)
GET     /webjars/*file                     controllers.WebJarAssets.at(file)
