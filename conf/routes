# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Publix
GET     /publix/:studyId/start                           @controllers.publix.PublixInterceptor.startStudy(studyId: Long)
GET     /publix/:studyId/end                             @controllers.publix.PublixInterceptor.finishStudy(studyId: Long, successful: Boolean ?= true, errorMsg: String ?= null)
GET     /publix/:studyId/getData                         @controllers.publix.PublixInterceptor.getStudyData(studyId: Long)
GET     /publix/:studyId/:componentId/start              @controllers.publix.PublixInterceptor.startComponent(studyId: Long, componentId: Long)
GET     /publix/:studyId/:componentId/end                @controllers.publix.PublixInterceptor.finishComponent(studyId: Long, componentId: Long, successful: Boolean ?= true, errorMsg: String ?= null)
GET     /publix/:studyId/startComponent                  @controllers.publix.PublixInterceptor.startComponentByPosition(studyId: Long, position: Integer)
GET     /publix/:studyId/startNextComponent              @controllers.publix.PublixInterceptor.startNextComponent(studyId: Long)
GET     /publix/:studyId/:componentId/getData            @controllers.publix.PublixInterceptor.getComponentData(studyId: Long, componentId: Long)
POST    /publix/:studyId/:componentId/submitResultData   @controllers.publix.PublixInterceptor.submitResultData(studyId: Long, componentId: Long)
POST    /publix/:studyId/:componentId/logError           @controllers.publix.PublixInterceptor.logError(studyId: Long, componentId: Long)
GET     /publix/teapot                                   @controllers.publix.PublixInterceptor.teapot()

# MechArg
GET     /mecharg/login                                 controllers.Authentication.login()
POST    /mecharg/login                                 controllers.Authentication.authenticate()
GET     /mecharg/logout                                controllers.Authentication.logout()
GET     /mecharg                                       controllers.Home.home()
GET     /mecharg/                                      controllers.Home.home()
GET     /                                              controllers.Home.home()
GET     /mecharg/user/create                           controllers.Users.create()
POST    /mecharg/user/create                           controllers.Users.submit()
GET     /mecharg/user/:email/editProfile               controllers.Users.editProfile(email: String)
POST    /mecharg/user/:email/editProfile               controllers.Users.submitEditedProfile(email: String)
GET     /mecharg/user/:email/changePassword            controllers.Users.changePassword(email: String)
POST    /mecharg/user/:email/changePassword            controllers.Users.submitChangedPassword(email: String)
GET     /mecharg/user/:email                           controllers.Users.profile(email: String)
GET     /mecharg/worker/:workerId                      controllers.Workers.index(workerId: Long)
DELETE  /mecharg/worker/:workerId/remove               controllers.Workers.remove(workerId: Long)
GET     /mecharg/worker/:workerId/tableData            controllers.StudyResults.tableDataByWorker(workerId: Long)
GET     /mecharg/studyresult/exportData                controllers.StudyResults.exportData(studyResultIds: String)
GET     /mecharg/studyresult/remove                    controllers.StudyResults.remove(studyResultIds: String)
GET     /mecharg/componentresult/exportData            controllers.ComponentResults.exportData(componentResultIds: String)
GET     /mecharg/componentresult/remove                controllers.ComponentResults.remove(componentResultIds: String)
GET     /mecharg/createStudy                           controllers.Studies.create()
POST    /mecharg/createStudy                           controllers.Studies.submit()
POST    /mecharg/importStudy                           controllers.Studies.importStudy()
GET     /mecharg/:studyId/edit                         controllers.Studies.edit(studyId: Long)
POST    /mecharg/:studyId/edit                         controllers.Studies.submitEdited(studyId: Long)
GET     /mecharg/:studyId/changeMembers                controllers.Studies.changeMembers(studyId: Long)
POST    /mecharg/:studyId/changeMembers                controllers.Studies.submitChangedMembers(studyId: Long)
DELETE  /mecharg/:studyId/remove                       controllers.Studies.remove(studyId: Long)
POST    /mecharg/:studyId/changeComponentOrder         controllers.Studies.changeComponentOrder(studyId: Long, componentId: Long, direction: String)
GET     /mecharg/:studyId/mturk                        controllers.Studies.showMTurkSourceCode(studyId: Long)
GET     /mecharg/:studyId/show                         controllers.Studies.showStudy(studyId: Long)
GET     /mecharg/:studyId/clone                        controllers.Studies.cloneStudy(studyId: Long)
GET     /mecharg/:studyId/export                       controllers.Studies.exportStudy(studyId: Long)
POST    /mecharg/:studyId/swapLock                     controllers.Studies.swapLock(studyId: Long)
GET     /mecharg/:studyId/results                      controllers.StudyResults.index(studyId: Long)
GET     /mecharg/:studyId/tableData                    controllers.StudyResults.tableDataByStudy(studyId: Long)
GET     /mecharg/:studyId                              controllers.Studies.index(studyId: Long, errorMsg: String ?= null)
GET     /mecharg/:studyId/                             controllers.Studies.index(studyId: Long, errorMsg: String ?= null)
GET     /mecharg/:studyId/createComponent              controllers.Components.create(studyId: Long)
POST    /mecharg/:studyId/createComponent              controllers.Components.submit(studyId: Long)
POST    /mecharg/:studyId/importComponent              controllers.Components.importComponent(studyId: Long)
GET     /mecharg/:studyId/:componentId/edit            controllers.Components.edit(studyId: Long, componentId: Long)
POST    /mecharg/:studyId/:componentId/edit            controllers.Components.submitEdited(studyId: Long, componentId: Long)
POST    /mecharg/:studyId/:componentId/changeProperty  controllers.Components.changeProperty(studyId: Long, componentId: Long, active: Boolean)
DELETE  /mecharg/:studyId/:componentId/remove          controllers.Components.remove(studyId: Long, componentId: Long)
GET     /mecharg/:studyId/:componentId/results         controllers.ComponentResults.index(studyId: Long, componentId: Long)
GET     /mecharg/:studyId/:componentId/tableData       controllers.ComponentResults.tableDataByComponent(studyId: Long, componentId: Long)
GET     /mecharg/:studyId/:componentId/show            controllers.Components.showComponent(studyId: Long, componentId: Long)
GET     /mecharg/:studyId/:componentId/clone           controllers.Components.cloneComponent(studyId: Long, componentId: Long)
GET     /mecharg/:studyId/:componentId/export          controllers.Components.exportComponent(studyId: Long, componentId: Long)
GET     /mecharg/:studyId/:componentId                 controllers.Components.index(studyId: Long, componentId: Long)
GET     /mecharg/:studyId/:componentId/                controllers.Components.index(studyId: Long, componentId: Long)

# Static resources (not managed by the Play framework) from the /public folder
GET     /studies/*file                     controllers.publix.ExternalAssets.at(file)
GET     /assets/*file                      controllers.Assets.at(path = "/public", file)
